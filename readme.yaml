# スネークゲーム仕様書

# 1. ゲーム概要
# 1.1. ゲーム名
game_title: 縞々スネークゲーム

# 1.2. プラットフォーム
platform: Webブラウザ (HTML, CSS, JavaScript)

# 1.3. ジャンル
genre: アクションパズルゲーム

# 1.4. 目的
objective: |
  プレイヤーは蛇を操作し、フィールド上の餌を食べることで蛇を成長させ、
  できるだけ高いスコアを目指す。
  蛇が壁または自分自身の体に衝突するとゲームオーバーとなる。

# 2. ゲーム要素
# 2.1. プレイヤーキャラクター (蛇)
snake:
  appearance: |
    複数の正方形のセグメントで構成される。
    セグメントは2色の縞々模様（例：赤とピンク）で描画される。
  initial_state:
    length: 1セグメント（または数セグメント）
    position: ゲームボード中央付近の左側
    direction: 右向き
  movement:
    controls:
      keyboard: 矢印キー (上, 下, 左, 右) または W, A, S, D キー
      on_screen_buttons: 上, 下, 左, 右ボタン (タッチデバイス向け)
    rules: |
      - 蛇は常に一定の速度で設定された方向に移動し続ける。
      - プレイヤーは蛇の進行方向を上下左右に変更できる。
      - 蛇は自身の進行方向と逆方向には直接転換できない（例：右に進んでいる時に左キーを押しても無効）。
  growth: |
    餌を食べるごとに蛇の長さが1セグメント分長くなる。
    新しいセグメントは蛇の尾に追加される。

# 2.2. 餌 (Food)
food:
  appearance: 単色の正方形（例：緑色） # 蛇の色と区別するため緑色に変更
  placement: |
    ゲームボード上のランダムな空きマスに1つ配置される。
    蛇が餌を食べると、新しい餌が別のランダムな空きマスに出現する。
  effect: 蛇が食べるとスコアが加算され、蛇が成長する。

# 2.3. ゲームボード (フィールド)
game_board:
  shape: 長方形のグリッド
  size:
    width: Canvas幅に応じて動的に決定 (例: 30マス)
    height: Canvas高さに応じて動的に決定 (例: 20マス)
  boundaries: 壁で囲まれている。蛇が壁に衝突するとゲームオーバー。

# 3. ゲームプレイ
# 3.1. 開始
game_start:
  - 蛇、餌が初期位置に配置される。
  - スコアは0から開始。
  - 蛇は自動的に右方向に移動を開始する。

# 3.2. 進行
game_progress:
  - プレイヤーは蛇を操作して餌を収集する。
  - 餌を食べるごとにスコアが加算される (例: +1点)。
  - 蛇が成長し、操作が難しくなる。
  - 一定スコアごとにゲームスピードが上昇する（任意）。

# 3.3. ゲームオーバー条件
game_over_conditions:
  - 蛇の頭がゲームボードの壁に衝突した場合。
  - 蛇の頭が自分自身の体（頭以外のセグメント）に衝突した場合。

# 3.4. ゲームオーバー処理
game_over_sequence:
  - ゲームの動作が停止する。
  - 「ゲームオーバー」メッセージと最終スコアが表示される。
  - リスタートオプションが提示される。

# 4. UI (ユーザーインターフェース)
# 4.1. メインゲーム画面
main_game_screen:
  elements:
    - ゲームボード (Canvas)
    - スコア表示
    - 操作ボタン (モバイル/タッチデバイス向け)
  layout: |
    画面上部にスコア表示。
    中央にゲームボード。
    ゲームボードの下または適切な位置に操作ボタンを配置。

# 4.2. メッセージ表示
message_display:
  type: モーダルウィンドウまたは画面中央のテキスト表示
  content:
    - ゲームオーバーメッセージ
    - 最終スコア
    - リスタートボタン

# 5. 技術仕様 (任意)
# 5.1. 使用技術
technology_stack:
  - HTML5
  - CSS3 (Tailwind CSSフレームワーク使用)
  - JavaScript (ES6+)

# 5.2. 描画
rendering: HTML5 Canvas API

# 5.3. レスポンシブデザイン
responsive_design: |
  デスクトップおよびモバイルデバイスに対応。
  Canvasサイズと操作ボタンのレイアウトは画面サイズに応じて調整される。

# 6. 将来的な拡張案 (任意)
future_enhancements:
  - 難易度選択 (Easy, Normal, Hard)
  - 障害物アイテムの追加
  - 特殊効果を持つ餌 (例: 一時的にスピードダウン、スコア2倍)
  - ハイスコアランキング
  - 効果音・BGM
